{"version":3,"sources":["index.js"],"names":["DEBUG_POSITIONS","DEBUG_CELL_OVERLAY","DEBUG_DISABLE_MOVE_CHECK","geoDistance","a","b","kmLat","kmToLat","kmLng","kmToLong","Math","sqrt","abs","lat","latRadians","PI","cos","OverlayCircle","props","inCell","x","y","className","active","style","transform","CroppedImage","src","imgHome","alt","sy","w","h","sx","Square","index","value","isNearest","classes","overlay","ux","uy","cx","cy","dx","geoUser","geoCenter","dy","distKM","nx","ny","s","cutDist","maxDist","min","rows","floor","dist","debugOverlay","position","color","backgroundColor","toString","onClick","handleClick","cols","Board","state","squares","width","window","innerWidth","height","innerHeight","setInterval","setState","distanceList","result","i","length","geo","cells","this","row","console","log","push","updateNearest","slice","neighbors","neighborsOf","nearest","gameData","hasLocation","map","cell","minIndex","renderSquare","React","Component","DebugCoords","coords","onChange","Game","serverData","navigator","geolocation","getCurrentPosition","latitude","longitude","debugChangeCoord","bind","e","newCoords","target","split","f","parseFloat","ReactDOM","render","document","getElementById"],"mappings":"sMAOIA,G,OAAkB,GAClBC,GAAqB,EACrBC,GAA2B,EAc/B,SAASC,EAAYC,EAAGC,GACpB,GAAiB,qBAAND,GAAkC,qBAANC,EACnC,OAAO,KAEX,IAAMC,EAAQC,EAAQH,EAAE,GAAKC,EAAE,IACzBG,EAAQC,EAASL,EAAE,GAAKC,EAAE,GAAID,EAAE,IAGtC,OADWM,KAAKC,KAAKL,EAAQA,EAAQE,EAAQA,GAIjD,SAASD,EAAQH,GACb,OAAO,QAAQM,KAAKE,IAAIR,GAG5B,SAASK,EAASL,EAAGS,GACjB,IAAMC,EAAaD,EAAIH,KAAKK,GAAK,IACjC,OAAO,OAASL,KAAKE,IAAIR,GAAKM,KAAKM,IAAIF,GAO3C,SAASG,EAAcC,GACnB,IAAKA,EAAMC,OACP,OAAO,qCAEX,IARwBC,EAAGC,EAQvBC,EAAYJ,EAAMI,UAItB,OAHIJ,EAAMK,SACND,GAAa,WAEV,yBAAKA,UAAWA,EAAWE,OAZVJ,EAYoCF,EAAME,EAZvCC,EAY0CH,EAAMG,EAXpE,CAACI,UAAU,aAAD,OAAeL,EAAf,eAAuBC,EAAvB,WAcrB,SAASK,EAAaR,GAClB,OAAO,yBAAKS,IAAKC,2DAAyBC,IAAI,OAAOL,MAAO,CAChD,WAAeN,EAAMY,GAAK,KAC1B,MAASZ,EAAMa,EAAI,KACnB,OAAWb,EAAMc,EAAI,KACrB,YAAed,EAAMe,GAAK,QAI1C,SAASC,EAAOhB,GACZ,IAAMiB,EAAQjB,EAAMkB,MAChBb,GAAS,EACPJ,EAASD,EAAMmB,UACjBC,EAAUnB,EAAS,kBAAoB,SACvCoB,EAAU,KACd,GAAIpB,EAAQ,CAER,IAAIqB,EACAC,EAEEC,EAAK,GAAIxB,EAAMa,EACfY,EAAK,GAAIzB,EAAMc,EAEfY,EAAKnC,EAASS,EAAM2B,QAAQ,GAAK3B,EAAM4B,UAAU,GAAI5B,EAAM2B,QAAQ,IACnEE,EAAKxC,EAAQW,EAAM2B,QAAQ,GAAK3B,EAAM4B,UAAU,IAClDE,EAAStC,KAAKC,KAAKiC,EAAGA,EAAKG,EAAGA,GAE9BE,EAAK,EACLC,EAAK,EACLF,EAAS,OACTC,EAAKL,EAAKI,EACVE,EAAKH,EAAKC,GAGd,IAEIG,EAFEC,EAAUlC,EAAM4B,UAAU,GAGhC,GAAIE,EAASI,EAGTD,EAAOH,EAASI,EALV,GAMN7B,GAAS,MAER,CAED,IACM8B,EAAUnC,EAAM4B,UAAU,GAEhCK,IADAH,EAAStC,KAAK4C,IAAIN,EAAQK,IACXD,IAAYC,EAAUD,IAAalC,EAAMc,EAAI,EAHlD,OAMdQ,EAAKE,EAAKS,EAAIF,EACdR,EAAKE,EAAKQ,EAAID,EAEdX,EAAU,oCACV,yBAAKjB,UAAU,WACf,kBAACL,EAAD,CAAeK,UAAU,cAAcF,EAAGoB,EAAInB,EAAGoB,EAAIlB,OAAQA,EAAQJ,OAAQA,IAC7E,kBAACF,EAAD,CAAeK,UAAU,gBAAgBF,EAAGsB,EAAIrB,EAAGsB,EAAIpB,OAAQA,EAAQJ,OAAQA,KAInF,IAAKgB,EACD,OACI,wBAAIb,UAAU,eAAeE,MAAO,CAAC,MAASN,EAAMa,EAAG,OAAUb,EAAMc,IAClEO,GAKb,IAAMnB,EAAIe,EAAQjB,EAAMqC,KAClBlC,EAAIX,KAAK8C,MAAMrB,EAAQjB,EAAMqC,MAC7BE,EAAOtD,EAAYe,EAAM4B,UAAW5B,EAAM2B,SAC1Ca,EAAezD,EACf,0BAAMuB,MAAO,CAACmC,SAAU,WAAYC,MAAO,QAASC,gBAAiB,UAArE,IAAiF3C,EAAM4B,UAAUgB,WAAa,QAAUL,EAAO,QAAUtC,EAAzI,KACA,KACN,OACI,wBAAIG,UAAWgB,EAASyB,QAAS,kBAAM7C,EAAM8C,eAAexC,MAAO,CAAC,MAASN,EAAMa,EAAG,OAAUb,EAAMc,IACjG0B,EACAnB,EACD,kBAACb,EAAD,CAAcK,EAAGb,EAAM+C,KAAK/C,EAAMa,EAAGC,EAAGd,EAAMqC,KAAKrC,EAAMc,EAAGC,GAAIb,EAAEF,EAAMa,EAAGD,GAAIT,EAAEH,EAAMc,EAAGb,OAAQA,K,IAKxG+C,E,kDACF,WAAYhD,GAAQ,IAAD,6BACf,cAAMA,IAMDiD,MAAQ,CAAEC,QADG,CAAC,EAAG,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACTH,KAL7B,EAKsCV,KAJtC,EAI+Cc,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,aAEhGC,aAAY,WACR,EAAKC,SAAL,2BAAkB,EAAKR,OAAvB,IAA8BE,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,iBACxE,KAEHC,aAAY,cAET,KAfY,E,qDAmBVE,GAGL,IAFA,IAAIC,GAAU,EACVvB,EAAM,OACDwB,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACjCF,EAAaE,GAAKxB,IAClBuB,EAASC,EACTxB,EAAMsB,EAAaE,IAG3B,MAAO,CAACD,EAAQvB,K,kCAGR0B,EAAKC,GAGb,IAFA,IAAIJ,GAAU,EACVvB,EAAM,WACDwB,EAAI,EAAGA,EAAIG,EAAMF,OAAQD,IAAK,CACnC,IAAMrB,EAAOyB,KAAK/E,YAAY6E,EAAKC,EAAMH,IACrCrB,EAAOH,IACPA,EAAMG,EACNoB,EAASC,GAGjB,OAAOD,I,kCAGCC,GACR,IAAID,EAAS,GACT9C,EAAImD,KAAKf,MAAMZ,KACf4B,EAAMzE,KAAK8C,MAAMsB,EAAII,KAAKf,MAAMZ,MAoBpC,OAjBA6B,QAAQC,IAAI,aAAe,CAACtD,EAAGmD,KAAKf,MAAMC,QAAQW,SAC9CD,EAAI/C,EAAImD,KAAKf,MAAMC,QAAQW,QAC3BF,EAAOS,KAAKR,EAAI/C,GAGhB+C,EAAI/C,GAAK,GACT8C,EAAOS,KAAKR,EAAI/C,GAGhBrB,KAAK8C,OAAOsB,EAAI,GAAK/C,KAAOoD,GAC5BN,EAAOS,KAAKR,EAAI,GAGhBA,EAAI,GAAKpE,KAAK8C,OAAOsB,EAAI,GAAK/C,KAAOoD,GACrCN,EAAOS,KAAKR,EAAI,GAGbD,I,kCAGC1C,GACR+C,KAAKK,gBACL,IAAMnB,EAAUc,KAAKf,MAAMC,QAAQoB,QAE/BC,EAAYP,KAAKQ,YAAYvD,GAMjC,GAFoBjC,GAA6BiC,IAAU+C,KAAKS,QAG5D,IAAK,IAAIb,EAAI,EAAGA,EAAIW,EAAUV,OAAQD,IAClC,GAA6B,MAAzBV,EAAQqB,EAAUX,IAAa,CAC/BM,QAAQC,IAAI,2BAA6BlD,EAAQ,OAASsD,EAAUX,IACpEV,EAAQqB,EAAUX,IAAMV,EAAQjC,GAChCiC,EAAQjC,GAAS,KACjB,MAKZ+C,KAAKP,SAAL,2BAAkBO,KAAKf,OAAvB,IAA8BC,QAASA,O,mCAG9BU,EAAGa,GAAU,IAAD,OAEjBtB,EAAQ,GAAKC,OAAOC,WAAc,EAClCC,EAAS,GAAKF,OAAOG,YAAe,EAOxC,OANIJ,EAAQG,EAHG,EAAE,EAIbH,EAAQG,GAJG,EAAE,GAObA,EAASH,GAPE,EAAE,GASV,kBAACnC,EAAD,CACPE,MAAO8C,KAAKf,MAAMC,QAAQU,GAC1BzC,UAAWyC,IAAMI,KAAKS,QACtB9C,QAASqC,KAAKhE,MAAM2B,QACpBC,UAAWoC,KAAKhE,MAAM0E,SAASX,MAAMH,GACrCd,YAAa,kBAAM,EAAKA,YAAYc,IACpC/C,EAAKsC,EACLrC,EAAKwC,EACLjB,KAAQ2B,KAAKf,MAAMZ,KACnBU,KAAQiB,KAAKf,MAAMF,S,sCAIN,IAAD,OACZiB,KAAKS,SAAW,EAChB,IAAIf,EAAe,GACfM,KAAKhE,MAAM2E,cACXjB,EAAeM,KAAKhE,MAAM0E,SAASX,MAAMa,KAAI,SAAAC,GAAI,OAAI5F,EAAY,EAAKe,MAAM2B,QAASkD,MACrFb,KAAKS,QAAUT,KAAKc,SAASpB,GAAc,M,+BAM/C,OADAM,KAAKK,gBAED,gCACA,2BAAOjE,UAAU,QACb,wBAAIA,UAAU,aACT4D,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,IAEvB,wBAAI3E,UAAU,aACT4D,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,IAEvB,wBAAI3E,UAAU,aACT4D,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,U,GAjJnBC,IAAMC,WAyJ1B,SAASC,EAAYlF,GACjB,OACI,kCACI,uDACA,2BAAOkB,MAAOlB,EAAMmF,OAAO,GAAK,KAAOnF,EAAMmF,OAAO,GAAIC,SAAUpF,EAAMoF,SAAU9E,MAAO,CAAC6C,MAAO,W,IAKvGkC,E,kDACF,WAAYrF,GAAQ,IAAD,8BACf,cAAMA,IACDiD,MAAQ,CAAC0B,aAAa,EACvBQ,OAAQ,CAAC,IAAK,IACdG,WAAY,CACZvB,MAAO,CACH,CAAC,WAAY,UAAW,KAAO,IAC/B,CAAC,WAAY,UAAW,KAAO,IAC/B,CAAC,SAAY,UAAW,KAAO,IAE/B,CAAC,WAAY,SAAW,KAAO,IAC/B,CAAC,WAAY,UAAW,KAAO,IAC/B,CAAC,WAAY,UAAW,KAAO,IAE/B,CAAC,WAAY,UAAW,KAAO,IAC/B,CAAC,WAAY,UAAW,KAAO,IAC/B,CAAC,WAAY,UAAW,KAAO,OAInCwB,UAAUC,YACVD,UAAUC,YAAYC,oBAAmB,SAAAhD,GACrC,EAAKgB,SAAL,2BAAkB,EAAKR,OAAvB,IAA8BkC,OAAQ,CAAC1C,EAAS0C,OAAOO,SAAUjD,EAAS0C,OAAOQ,WAAYhB,aAAa,QAG9G,EAAKlB,SAAL,2BAAkB,EAAKR,OAAvB,IAA8B0B,aAAa,KAG/C,EAAKiB,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBA5BT,E,6DA+BFC,GACb5B,QAAQC,IAAI,0BACZ,IAAI4B,EAAY/B,KAAKf,MAAMkC,OAAOb,QAClCyB,EAAYD,EAAEE,OAAO9E,MAAM+E,MAAM,KAAKrB,KAAI,SAAAsB,GAAC,OAAIC,WAAWD,MAC1DlC,KAAKP,SAAL,2BAAkBO,KAAKf,OAAvB,IAA8BkC,OAAQY,O,+BAItC,OACI,6BACMjH,EAAkB,kBAACoG,EAAD,CAAaC,OAAQnB,KAAKf,MAAMkC,OAAQC,SAAUpB,KAAK4B,mBAAsB,KACjG,kBAAC5C,EAAD,CAAO0B,SAAUV,KAAKf,MAAMqC,WAAY3D,QAASqC,KAAKf,MAAMkC,OAAQR,YAAaX,KAAKf,MAAM0B,mB,GA3CzFK,IAAMC,WAmDzBmB,IAASC,OACL,kBAAChB,EAAD,MACAiB,SAASC,eAAe,U","file":"static/js/main.1d92892e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nlet PRODUCTION = false;\r\n\r\nlet imgHome = \"https://beethacker.github.io/slidepuzzle/img/\";\r\nlet DEBUG_POSITIONS = true;\r\nlet DEBUG_CELL_OVERLAY = false;\r\nlet DEBUG_DISABLE_MOVE_CHECK = true;\r\nlet DEBUG_SHOW_STATE = true;\r\n\r\nif (PRODUCTION) {\r\n    DEBUG_POSITIONS = false;\r\n    DEBUG_CELL_OVERLAY = false;\r\n    DEBUG_DISABLE_MOVE_CHECK = false;\r\n    DEBUG_SHOW_STATE = false;\r\n}\r\n\r\n/*\r\nLatitude: 1 deg = 110.574 km\r\nLongitude: 1 deg = 111.320*cos(latitude) km\r\n*/\r\nfunction geoDistance(a, b) {\r\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\r\n        return null;\r\n    } \r\n    const kmLat = kmToLat(a[1] - b[1]);\r\n    const kmLng = kmToLong(a[0] - b[0], a[1]);\r\n\r\n    const km = Math.sqrt(kmLat * kmLat + kmLng * kmLng);\r\n    return km;\r\n}\r\n\r\nfunction kmToLat(a) {\r\n    return 110.574*Math.abs(a);\r\n}\r\n\r\nfunction kmToLong(a, lat) {\r\n    const latRadians = lat*Math.PI / 180;\r\n    return 111.32 * Math.abs(a) * Math.cos(latRadians);\r\n}\r\n\r\nfunction makeTranslateStyle(x, y) {\r\n    return {transform: `translate(${x}px, ${y}px)`};\r\n}\r\n\r\nfunction OverlayCircle(props) {\r\n    if (!props.inCell) {\r\n        return <></>;\r\n    }\r\n    let className = props.className; \r\n    if (props.active) {\r\n        className += \" active\";\r\n    } \r\n    return <div className={className} style={makeTranslateStyle(props.x, props.y)}></div>\r\n}\r\n\r\nfunction CroppedImage(props) {\r\n    return <img src={imgHome + \"camping.jpg\"} alt=\"stub\" style={{\r\n                \"marginTop\" : -props.sy + \"px\",\r\n                \"width\": props.w + \"px\",\r\n                \"height\" : props.h + \"px\",\r\n                \"marginLeft\": -props.sx + \"px\",\r\n            }}/>\r\n}\r\n\r\nfunction Square(props) {\r\n    const index = props.value;\r\n    let active = false;\r\n    const inCell = props.isNearest;// || (typeof props.geoUser !== undefined);\r\n    let classes = inCell ? \"square selected\" : \"square\";\r\n    let overlay = null;\r\n    if (inCell) {\r\n        //User coordinates that we'll calculate!\r\n        let ux;\r\n        let uy;        \r\n        //Cell center!\r\n        const cx = 0.5*props.w;\r\n        const cy = 0.5*props.h;\r\n        //User coordinate delta (in km) from cell center\r\n        const dx = kmToLong(props.geoUser[0] - props.geoCenter[0], props.geoUser[1]);\r\n        const dy = kmToLat(props.geoUser[1] - props.geoCenter[1]);\r\n        let distKM = Math.sqrt(dx*dx + dy*dy);\r\n        //Unit vector for users direction from cell center\r\n        let nx = 0;\r\n        let ny = 0;\r\n        if (distKM > 0.0001) {\r\n            nx = dx / distKM;\r\n            ny = dy / distKM;\r\n        }\r\n        //Determin if we're in the inner ring\r\n        const cutDist = props.geoCenter[2];\r\n        const r = 30; //PIXEL RADIUS of ring\r\n        let s;        //scale km to pixels\r\n        if (distKM < cutDist) {\r\n            //We're drawing the inner circle as 30px radius.\r\n            //TODO Is that appropriate on mobile? Maybe we generate those in code.            \r\n            s = r*(distKM / cutDist);\r\n            active = true;\r\n        }\r\n        else {\r\n            //Otherwise, we want to lerp (cutDist, dist ,maxDist) --> (30, ,h/2);\r\n            const r = 30;\r\n            const maxDist = props.geoCenter[3];\r\n            distKM = Math.min(distKM, maxDist); //Don't draw OUTSIDE of cell\r\n            s = ((distKM - cutDist) / (maxDist - cutDist)) * (props.h / 2 - r) + r;\r\n        }\r\n        //Coordinates of user dot\r\n        ux = cx + s * nx;\r\n        uy = cy + s * ny;\r\n\r\n        overlay = <>\r\n        <div className=\"circle\" />\r\n        <OverlayCircle className=\"user-circle\" x={ux} y={uy} active={active} inCell={inCell}/>\r\n        <OverlayCircle className=\"center-circle\" x={cx} y={cy} active={active} inCell={inCell}/>\r\n        </>\r\n    }\r\n\r\n    if (!index) {\r\n        return (\r\n            <td className=\"square empty\" style={{\"width\": props.w, \"height\": props.h}}>\r\n                {overlay}\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const x = index % props.rows;\r\n    const y = Math.floor(index / props.rows);\r\n    const dist = geoDistance(props.geoCenter, props.geoUser);\r\n    const debugOverlay = DEBUG_CELL_OVERLAY\r\n        ? <span style={{position: \"absolute\", color: \"white\", backgroundColor: \"black\"}}> {props.geoCenter.toString() + \" ==> \" + dist + \", in=\" + inCell} </span>\r\n        : null;\r\n    return (\r\n        <td className={classes} onClick={() => props.handleClick()} style={{\"width\": props.w, \"height\": props.h}}>\r\n            {debugOverlay}\r\n            {overlay}        \r\n            <CroppedImage w={props.cols*props.w} h={props.rows*props.h} sx={x*props.w} sy={y*props.h} inCell={inCell}/>\r\n        </td>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var x = 3;\r\n        var y = 3;\r\n\r\n        //TODO get this from local storage, or scramble a new one\r\n        let puzzleState = [1, null, 2, 3, 4, 5, 6, 7, 8];\r\n        this.state = { squares: puzzleState, cols: x, rows: y, width: window.innerWidth, height: window.innerHeight };\r\n\r\n        setInterval(() => {\r\n            this.setState({...this.state, width: window.innerWidth, height: window.innerHeight});\r\n        }, 2000);\r\n\r\n        setInterval(() => {\r\n            \r\n        }, 2000);\r\n    }\r\n\r\n\r\n    minIndex(distanceList) {\r\n        let result = -1;\r\n        let min = 999999;\r\n        for (let i = 0; i < distanceList.length; i++) {\r\n            if (distanceList[i] < min) {\r\n                result = i;\r\n                min = distanceList[i];\r\n            }\r\n        }\r\n        return [result, min];\r\n    }\r\n\r\n    findNearest(geo, cells) {\r\n        let result = -1;\r\n        let min = 9999999999;\r\n        for (var i = 0; i < cells.length; i++) {\r\n            const dist = this.geoDistance(geo, cells[i]);   \r\n            if (dist < min) {\r\n                min = dist;\r\n                result = i;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    neighborsOf(i) {\r\n        var result = [];\r\n        var w = this.state.rows;\r\n        var row = Math.floor(i / this.state.rows);\r\n\r\n        //Down one row\r\n        console.log(\"w  and len\" + [w, this.state.squares.length]);\r\n        if (i + w < this.state.squares.length) {\r\n            result.push(i + w)\r\n        }\r\n        //Up one \r\n        if (i - w >= 0) {\r\n            result.push(i - w);\r\n        }\r\n        //Right\r\n        if (Math.floor((i + 1) / w) === row) {\r\n            result.push(i + 1);\r\n        }\r\n        //Left\r\n        if (i > 0 && Math.floor((i - 1) / w) === row) {\r\n            result.push(i - 1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    handleClick(index) {\r\n        this.updateNearest();\r\n        const squares = this.state.squares.slice();\r\n\r\n        let neighbors = this.neighborsOf(index);\r\n       // alert(neighbors);\r\n\r\n        //TODO need to check if move is allowed!!!\r\n        const moveAllowed = DEBUG_DISABLE_MOVE_CHECK || (index === this.nearest);\r\n\r\n        if (moveAllowed) {\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                if (squares[neighbors[i]] == null) {\r\n                    console.log(\"Found a match! Can move \" + index + \" to \" + neighbors[i]);\r\n                    squares[neighbors[i]] = squares[index];\r\n                    squares[index] = null;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({...this.state, squares: squares });\r\n    }\r\n\r\n    renderSquare(i, nearest) {\r\n        const aspect = 4/3;\r\n        let width = 0.9*(window.innerWidth) / 3;\r\n        let height = 0.9*(window.innerHeight) / 3;\r\n        if (width / height > aspect) {\r\n            width = height * aspect;\r\n        }\r\n        else {\r\n            height = width / aspect;\r\n        }\r\n        return <Square\r\n        value={this.state.squares[i]} \r\n        isNearest={i === this.nearest}\r\n        geoUser={this.props.geoUser}\r\n        geoCenter={this.props.gameData.cells[i]}\r\n        handleClick={() => this.handleClick(i)} \r\n        w = {width}\r\n        h = {height}\r\n        rows = {this.state.rows}\r\n        cols = {this.state.cols}\r\n        />;\r\n    }\r\n\r\n    updateNearest() {\r\n        this.nearest = -1;\r\n        var distanceList = [];\r\n        if (this.props.hasLocation) {\r\n            distanceList = this.props.gameData.cells.map(cell => geoDistance(this.props.geoUser, cell));\r\n            this.nearest = this.minIndex(distanceList)[0];\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.updateNearest();\r\n        return (\r\n            <center>\r\n            <table className=\"grid\">\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </tr>\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </tr>\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </tr>\r\n            </table>\r\n            </center>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DebugCoords(props) {\r\n    return (\r\n        <fieldset>\r\n            <legend> Debug Coordinates </legend>\r\n            <input value={props.coords[0] + \", \" + props.coords[1]} onChange={props.onChange} style={{width: \"100%\"}}/>            \r\n        </fieldset>\r\n    )\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasLocation: false, \r\n            coords: [44, -63],\r\n            serverData: {\r\n            cells: [\r\n                [44.662461, -63.603948, 0.075, 0.5],  //Agricola\r\n                [44.664109, -63.601264, 0.075, 0.5],  //Novalea\r\n                [44.666200, -63.600276, 0.075, 0.5],  //Stairs\r\n\r\n                [44.659729, -63.602380, 0.075, 0.5],   //Rbboie\r\n                [44.661985, -63.598293, 0.075, 0.5],   //home  \r\n                [44.664368, -63.595637, 0.075, 0.5],   //Devonshire\r\n\r\n                [44.657439, -63.598772, 0.075, 0.5],   //Robbie almon\r\n                [44.659897, -63.595294, 0.075, 0.5],   //Gottigen almon \r\n                [44.662278, -63.591474, 0.075, 0.5]    //Barrington\r\n             ]\r\n        }};\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({...this.state, coords: [position.coords.latitude, position.coords.longitude], hasLocation: true});\r\n            });\r\n        } else {\r\n            this.setState({...this.state, hasLocation: false});\r\n        }\r\n\r\n        this.debugChangeCoord = this.debugChangeCoord.bind(this);\r\n    }\r\n\r\n    debugChangeCoord(e) {\r\n        console.log(\"Trying to change it...\");\r\n        let newCoords = this.state.coords.slice();\r\n        newCoords = e.target.value.split(\",\").map(f => parseFloat(f));\r\n        this.setState({...this.state, coords: newCoords});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                { DEBUG_POSITIONS ? <DebugCoords coords={this.state.coords} onChange={this.debugChangeCoord}/> : null }\r\n                <Board gameData={this.state.serverData} geoUser={this.state.coords} hasLocation={this.state.hasLocation}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}