{"version":3,"sources":["geo.js","debug.js","square.js","index.js"],"names":["distanceInKm","a","b","kmLat","kmToLat","kmLng","kmToLong","Math","sqrt","abs","lat","latRadians","PI","cos","DEBUG","flag","DEBUG_FLAGS","SET_GPS","CELL_OVERAL","DISABLE_MOVE_CHECK","LOCAL_SERVER","Object","keys","key","Square","props","index","value","active","inCell","isNearest","classes","overlay","ux","uy","cx","w","cy","h","dx","Geo","geoUser","geoCenter","dy","distKM","nx","ny","s","cutDist","maxDist","min","className","OverlayCircle","x","y","style","rows","floor","dist","debugOverlay","position","color","backgroundColor","toString","onClick","handleClick","CroppedImage","cols","sx","sy","transform","src","img","alt","jsonHome","Board","state","squares","width","window","innerWidth","height","innerHeight","setInterval","setState","distanceList","result","i","length","geo","cells","this","geoDistance","row","console","log","push","updateNearest","slice","neighbors","neighborsOf","nearest","gameData","hasLocation","map","cell","minIndex","renderSquare","React","Component","DebugCoords","coords","onChange","Game","puzzle","location","pathname","substr","serverData","json","fetch","then","val","parse","JSON","catch","err","fetchError","navigator","geolocation","getCurrentPosition","latitude","longitude","debugChangeCoord","bind","e","newCoords","target","split","f","parseFloat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f211c2b3.chunk.js","sourcesContent":["export {distanceInKm, kmToLat, kmToLong};\r\n\r\n/*\r\nLatitude: 1 deg = 110.574 km\r\nLongitude: 1 deg = 111.320*cos(latitude) km\r\n*/\r\nfunction distanceInKm(a, b) {\r\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\r\n        return null;\r\n    } \r\n    const kmLat = kmToLat(a[1] - b[1]);\r\n    const kmLng = kmToLong(a[0] - b[0], a[1]);\r\n\r\n    const km = Math.sqrt(kmLat * kmLat + kmLng * kmLng);\r\n    return km;\r\n}\r\n\r\nfunction kmToLat(a) {\r\n    return 110.574*Math.abs(a);\r\n}\r\n\r\nfunction kmToLong(a, lat) {\r\n    const latRadians = lat*Math.PI / 180;\r\n    return 111.32 * Math.abs(a) * Math.cos(latRadians);\r\n}\r\n","export default DEBUG;\r\n\r\nlet PRODUCTION = true;\r\n\r\n//Some debugging options\r\nlet DEBUG_FLAGS = {\r\n    SET_GPS: true,\r\n    CELL_OVERAL: false,\r\n    DISABLE_MOVE_CHECK: false,\r\n    LOCAL_SERVER: true\r\n};\r\n\r\n\r\n//If I set production, force all debug options off\r\nif (PRODUCTION) {\r\n    for(let key of Object.keys(DEBUG_FLAGS)) {\r\n        DEBUG_FLAGS[key] = false;\r\n    }\r\n}\r\n\r\nfunction DEBUG(flag) {\r\n    return DEBUG_FLAGS[flag];\r\n}","import React from 'react';\r\nimport * as Geo from './geo.js';\r\nimport DEBUG from './debug.js';\r\nexport default Square;\r\n\r\nfunction makeTranslateStyle(x, y) {\r\n    return {transform: `translate(${x}px, ${y}px)`};\r\n}\r\n\r\nfunction OverlayCircle(props) {\r\n    if (!props.inCell) {\r\n        return <></>;\r\n    }\r\n    let className = props.className; \r\n    if (props.active) {\r\n        className += \" active\";\r\n    } \r\n    return <div className={className} style={makeTranslateStyle(props.x, props.y)}></div>\r\n}\r\n\r\nfunction CroppedImage(props) {\r\n    return <img src={props.img} alt=\"stub\" style={{\r\n                \"marginTop\" : -props.sy + \"px\",\r\n                \"width\": props.w + \"px\",\r\n                \"height\" : props.h + \"px\",\r\n                \"marginLeft\": -props.sx + \"px\",\r\n            }}/>\r\n}\r\n\r\nfunction Square(props) {\r\n    const index = props.value;\r\n    let active = false;\r\n    const inCell = props.isNearest;// || (typeof props.geoUser !== undefined);\r\n    let classes = inCell ? \"square selected\" : \"square\";\r\n    let overlay = null;\r\n    if (inCell) {\r\n        //User coordinates that we'll calculate!\r\n        let ux;\r\n        let uy;        \r\n        //Cell center!\r\n        const cx = 0.5*props.w;\r\n        const cy = 0.5*props.h;\r\n        //User coordinate delta (in km) from cell center\r\n        const dx = Geo.kmToLong(props.geoUser[0] - props.geoCenter[0], props.geoUser[1]);\r\n        const dy = Geo.kmToLat(props.geoUser[1] - props.geoCenter[1]);\r\n        let distKM = Math.sqrt(dx*dx + dy*dy);\r\n        //Unit vector for users direction from cell center\r\n        let nx = 0;\r\n        let ny = 0;\r\n        if (distKM > 0.0001) {\r\n            nx = dx / distKM;\r\n            ny = dy / distKM;\r\n        }\r\n        //Determin if we're in the inner ring\r\n        const cutDist = props.geoCenter[2];\r\n        const r = 30; //PIXEL RADIUS of ring\r\n        let s;        //scale km to pixels\r\n        if (distKM < cutDist) {\r\n            //We're drawing the inner circle as 30px radius.\r\n            //TODO Is that appropriate on mobile? Maybe we generate those in code.            \r\n            s = r*(distKM / cutDist);\r\n            active = true;\r\n        }\r\n        else {\r\n            //Otherwise, we want to lerp (cutDist, dist ,maxDist) --> (30, ,h/2);\r\n            const r = 30;\r\n            const maxDist = props.geoCenter[3];\r\n            distKM = Math.min(distKM, maxDist); //Don't draw OUTSIDE of cell\r\n            s = ((distKM - cutDist) / (maxDist - cutDist)) * (props.h / 2 - r) + r;\r\n        }\r\n        //Coordinates of user dot\r\n        ux = cx + s * nx;\r\n        uy = cy + s * ny;\r\n\r\n        overlay = <>\r\n        <div className=\"circle\" />\r\n        <OverlayCircle className=\"user-circle\" x={ux} y={uy} active={active} inCell={inCell}/>\r\n        <OverlayCircle className=\"center-circle\" x={cx} y={cy} active={active} inCell={inCell}/>\r\n        </>\r\n    }\r\n\r\n    if (!index) {\r\n        return (\r\n            <td className=\"square empty\" style={{\"width\": props.w, \"height\": props.h}}>\r\n                {overlay}\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const x = index % props.rows;\r\n    const y = Math.floor(index / props.rows);\r\n    const dist = Geo.distanceInKm(props.geoCenter, props.geoUser);\r\n    const debugOverlay = DEBUG(\"CELL_OVERLAY\")\r\n        ? <span style={{position: \"absolute\", color: \"white\", backgroundColor: \"black\"}}> {props.geoCenter.toString() + \" ==> \" + dist + \", in=\" + inCell} </span>\r\n        : null;\r\n    return (\r\n        <td className={classes} onClick={() => props.handleClick()} style={{\"width\": props.w, \"height\": props.h}}>\r\n            {debugOverlay}\r\n            {overlay}        \r\n            <CroppedImage w={props.cols*props.w} h={props.rows*props.h} sx={x*props.w} sy={y*props.h} inCell={inCell}/>\r\n        </td>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as Geo from './geo.js';\r\nimport DEBUG from './debug.js'; \r\nimport Square from './square.js';\r\n\r\nlet imgHome = \"https://beethacker.github.io/slidepuzzle/img/\";\r\nlet jsonHome = \"https://beethacker.github.io/slidepuzzle/json/\";\r\n\r\n\r\n//Hack to make json files fetchable locally. Not sure how to set up node/webpack/whatever for this\r\n//so I'll just make them available with a separate python server. \r\nif (DEBUG(\"LOCAL_SERVER\")) {\r\n    //NOTE! In order for fetch to work, we couldn't just say http://localhost:8000/json/\r\n    //here. Instead, we had to set http://localhost as a proxy in package.json.\r\n    jsonHome = \"/json/\";\r\n    imgHome = \"/img/\";\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var x = 3;\r\n        var y = 3;\r\n\r\n        //TODO get this from local storage, or scramble a new one\r\n        let puzzleState = [1, null, 2, 3, 4, 5, 6, 7, 8];\r\n        this.state = { squares: puzzleState, cols: x, rows: y, width: window.innerWidth, height: window.innerHeight };\r\n\r\n        setInterval(() => {\r\n            this.setState({...this.state, width: window.innerWidth, height: window.innerHeight});\r\n        }, 2000);\r\n\r\n        setInterval(() => {\r\n            \r\n        }, 2000);\r\n    }\r\n\r\n\r\n    minIndex(distanceList) {\r\n        let result = -1;\r\n        let min = 999999;\r\n        for (let i = 0; i < distanceList.length; i++) {\r\n            if (distanceList[i] < min) {\r\n                result = i;\r\n                min = distanceList[i];\r\n            }\r\n        }\r\n        return [result, min];\r\n    }\r\n\r\n    findNearest(geo, cells) {\r\n        let result = -1;\r\n        let min = 9999999999;\r\n        for (var i = 0; i < cells.length; i++) {\r\n            const dist = this.geoDistance(geo, cells[i]);   \r\n            if (dist < min) {\r\n                min = dist;\r\n                result = i;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    neighborsOf(i) {\r\n        var result = [];\r\n        var w = this.state.rows;\r\n        var row = Math.floor(i / this.state.rows);\r\n\r\n        //Down one row\r\n        console.log(\"w  and len\" + [w, this.state.squares.length]);\r\n        if (i + w < this.state.squares.length) {\r\n            result.push(i + w)\r\n        }\r\n        //Up one \r\n        if (i - w >= 0) {\r\n            result.push(i - w);\r\n        }\r\n        //Right\r\n        if (Math.floor((i + 1) / w) === row) {\r\n            result.push(i + 1);\r\n        }\r\n        //Left\r\n        if (i > 0 && Math.floor((i - 1) / w) === row) {\r\n            result.push(i - 1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    handleClick(index) {\r\n        this.updateNearest();\r\n        const squares = this.state.squares.slice();\r\n\r\n        let neighbors = this.neighborsOf(index);\r\n       // alert(neighbors);\r\n\r\n        //TODO need to check if move is allowed!!!\r\n        const moveAllowed = DEBUG(\"DISABLE_MOVE_CHECK\") || (index === this.nearest);\r\n\r\n        if (moveAllowed) {\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                if (squares[neighbors[i]] == null) {\r\n                    console.log(\"Found a match! Can move \" + index + \" to \" + neighbors[i]);\r\n                    squares[neighbors[i]] = squares[index];\r\n                    squares[index] = null;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({...this.state, squares: squares });\r\n    }\r\n\r\n    renderSquare(i, nearest) {\r\n        const aspect = 4/3;\r\n        let width = 0.9*(window.innerWidth) / 3;\r\n        let height = 0.9*(window.innerHeight) / 3;\r\n        if (width / height > aspect) {\r\n            width = height * aspect;\r\n        }\r\n        else {\r\n            height = width / aspect;\r\n        }\r\n        return <Square\r\n        value={this.state.squares[i]} \r\n        isNearest={i === this.nearest}\r\n        geoUser={this.props.geoUser}\r\n        geoCenter={this.props.gameData.cells[i]}\r\n        handleClick={() => this.handleClick(i)} \r\n        w = {width}\r\n        h = {height}\r\n        rows = {this.state.rows}\r\n        cols = {this.state.cols}\r\n        />;\r\n    }\r\n\r\n    updateNearest() {\r\n        this.nearest = -1;\r\n        var distanceList = [];\r\n        if (this.props.hasLocation) {\r\n            distanceList = this.props.gameData.cells.map(cell => Geo.distanceInKm(this.props.geoUser, cell));\r\n            this.nearest = this.minIndex(distanceList)[0];\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.updateNearest();\r\n        return (\r\n            <center>\r\n            <table className=\"grid\">\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </tr>\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </tr>\r\n                <tr className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </tr>\r\n            </table>\r\n            </center>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DebugCoords(props) {\r\n    return (\r\n        <fieldset>\r\n            <legend> Debug Coordinates </legend>\r\n            <input value={props.coords[0] + \", \" + props.coords[1]} onChange={props.onChange} style={{width: \"100%\"}}/>            \r\n        </fieldset>\r\n    )\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {    \r\n        super(props);\r\n\r\n        let puzzle = window.location.pathname.substr(1);\r\n\r\n        this.state = {hasLocation: false, \r\n            coords: [44, -63],\r\n            serverData: null,\r\n            puzzle: puzzle\r\n        };\r\n\r\n        if (puzzle.length > 0) {\r\n            const json = jsonHome + puzzle + \".json\";\r\n            console.log(\"Fetch from: \" + json);\r\n            fetch(json)\r\n            .then( (val) => {\r\n                console.log(\"About to parse: \" + val);\r\n                let parse = JSON.parse(val);\r\n                console.log(\"TEST:\" + parse);\r\n                this.setState({ serverData : JSON.parse(val) });\r\n            })\r\n            .catch( (err) => this.setState({ fetchError: \"Failed to fetch: \" + json }));\r\n        }\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({coords: [position.coords.latitude, position.coords.longitude], hasLocation: true});\r\n            });\r\n        } else {\r\n            this.setState({hasLocation: false});\r\n        }\r\n\r\n        this.debugChangeCoord = this.debugChangeCoord.bind(this);\r\n    }\r\n\r\n    debugChangeCoord(e) {\r\n        const newCoords = e.target.value.split(\",\").map(f => parseFloat(f));\r\n        this.setState({ coords: newCoords });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.fetchError) {\r\n            return <div> {this.state.fetchError} </div>;\r\n        }\r\n        if (this.state.serverData === null) {\r\n            return <div> Loading...</div>;\r\n        }\r\n        return (\r\n            <div> \r\n                { DEBUG(\"SET_GPS\") ? <DebugCoords coords={this.state.coords} onChange={this.debugChangeCoord}/> : null }\r\n                <Board gameData={this.state.serverData} geoUser={this.state.coords} hasLocation={this.state.hasLocation}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}