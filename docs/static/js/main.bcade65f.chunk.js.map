{"version":3,"sources":["geo.js","debug.js","square.js","solved.js","index.js"],"names":["distanceInKm","a","b","kmLat","kmToLat","kmLng","kmToLong","Math","sqrt","abs","lat","latRadians","PI","cos","DEBUG","flag","DEBUG_FLAGS","CLEAR_STATE","SET_GPS","CELL_OVERAL","DISABLE_MOVE_CHECK","LOCAL_SERVER","SHOW_SOLVED","Object","keys","key","Square","props","index","value","active","inCell","isNearest","classes","overlay","ux","uy","cx","w","cy","h","dx","Geo","geoUser","geoCenter","dy","distKM","nx","ny","s","cutDist","maxDist","min","className","OverlayCircle","x","y","style","rows","floor","dist","debugOverlay","position","color","backgroundColor","toString","onClick","handleClick","CroppedImage","img","cols","sx","sy","transform","src","alt","Solved","imSize","serverData","imgsize","aspect","width","window","innerWidth","height","innerHeight","link","solveLink","linkTxt","solveLinkTxt","solveTxt","href","imgSrc","scrambleFn","imgHome","localStorage","clear","Board","puzzleState","savedState","puzzleName","split","map","n","Number","scramble","state","squares","setInterval","setState","distanceList","result","i","length","geo","cells","this","geoDistance","gridsize","row","push","puzzle","iterations","zeroIndex","indexOf","neighborIndices","neighborsOf","randomNeighbor","random","updateNearest","slice","neighbors","nearest","includes","alert","gridSize","hasLocation","cell","minIndex","isSolved","renderSquare","React","Component","DebugCoords","coords","onChange","extractPuzzleName","txt","startsWith","Game","location","pathname","removeItem","json","fetch","then","response","data","catch","err","fetchError","navigator","geolocation","watchPosition","geoError","latitude","longitude","debugChangeCoord","bind","getCurrentPosition","e","newCoords","target","f","parseFloat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcade65f.chunk.js","sourcesContent":["export {distanceInKm, kmToLat, kmToLong};\r\n\r\n/*\r\nLatitude: 1 deg = 110.574 km\r\nLongitude: 1 deg = 111.320*cos(latitude) km\r\n*/\r\nfunction distanceInKm(a, b) {\r\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\r\n        return null;\r\n    } \r\n    const kmLat = kmToLat(a[1] - b[1]);\r\n    const kmLng = kmToLong(a[0] - b[0], a[1]);\r\n\r\n    const km = Math.sqrt(kmLat * kmLat + kmLng * kmLng);\r\n    return km;\r\n}\r\n\r\nfunction kmToLat(a) {\r\n    return 110.574*Math.abs(a);\r\n}\r\n\r\nfunction kmToLong(a, lat) {\r\n    const latRadians = lat*Math.PI / 180;\r\n    return 111.32 * Math.abs(a) * Math.cos(latRadians);\r\n}\r\n","export default DEBUG;\r\n\r\nlet PRODUCTION = true;\r\n\r\n//Some debugging options\r\nlet DEBUG_FLAGS = {\r\n    CLEAR_STATE: false,\r\n    SET_GPS: false,\r\n    CELL_OVERAL: false,\r\n    DISABLE_MOVE_CHECK: false,\r\n    LOCAL_SERVER: false,\r\n    SHOW_SOLVED: false\r\n};\r\n\r\n\r\n//If I set production, force all debug options off\r\nif (PRODUCTION) {\r\n    for(let key of Object.keys(DEBUG_FLAGS)) {\r\n        DEBUG_FLAGS[key] = false;\r\n    }\r\n}\r\n\r\nfunction DEBUG(flag) {\r\n    return DEBUG_FLAGS[flag];\r\n}","import React from 'react';\r\nimport * as Geo from './geo.js';\r\nimport DEBUG from './debug.js';\r\nexport default Square;\r\n\r\nfunction makeTranslateStyle(x, y) {\r\n    return {transform: `translate(${x}px, ${y}px)`};\r\n}\r\n\r\nfunction OverlayCircle(props) {\r\n    if (!props.inCell) {\r\n        return <></>;\r\n    }\r\n    let className = props.className; \r\n    if (props.active) {\r\n        className += \" active\";\r\n    } \r\n    return <div className={className} style={makeTranslateStyle(props.x, props.y)}></div>\r\n}\r\n\r\nfunction CroppedImage(props) {\r\n    return <img src={props.img} alt=\"stub\" style={{\r\n                \"marginTop\" : -props.sy + \"px\",\r\n                \"width\": props.w + \"px\",\r\n                \"height\" : props.h + \"px\",\r\n                \"marginLeft\": -props.sx + \"px\",\r\n            }}/>\r\n}\r\n\r\nfunction Square(props) {\r\n    const index = props.value;\r\n    let active = false;\r\n    const inCell = props.isNearest;// || (typeof props.geoUser !== undefined);\r\n    let classes = inCell ? \"square selected\" : \"square\";\r\n    let overlay = null;\r\n    if (inCell) {\r\n        //User coordinates that we'll calculate!\r\n        let ux;\r\n        let uy;        \r\n        //Cell center!\r\n        const cx = 0.5*props.w;\r\n        const cy = 0.5*props.h;\r\n        //User coordinate delta (in km) from cell center\r\n        const dx = Geo.kmToLong(props.geoUser[0] - props.geoCenter[0], props.geoUser[1]);\r\n        const dy = Geo.kmToLat(props.geoUser[1] - props.geoCenter[1]);\r\n        let distKM = Math.sqrt(dx*dx + dy*dy);\r\n        //Unit vector for users direction from cell center\r\n        let nx = 0;\r\n        let ny = 0;\r\n        if (distKM > 0.0001) {\r\n            nx = dx / distKM;\r\n            ny = dy / distKM;\r\n        }\r\n        //Determin if we're in the inner ring\r\n        const cutDist = props.geoCenter[2];\r\n        const r = 30; //PIXEL RADIUS of ring\r\n        let s;        //scale km to pixels\r\n        if (distKM < cutDist) {\r\n            //We're drawing the inner circle as 30px radius.\r\n            //TODO Is that appropriate on mobile? Maybe we generate those in code.            \r\n            s = r*(distKM / cutDist);\r\n            active = true;\r\n        }\r\n        else {\r\n            //Otherwise, we want to lerp (cutDist, dist ,maxDist) --> (30, ,h/2);\r\n            const r = 30;\r\n            const maxDist = props.geoCenter[3];\r\n            distKM = Math.min(distKM, maxDist); //Don't draw OUTSIDE of cell\r\n            s = ((distKM - cutDist) / (maxDist - cutDist)) * (props.h / 2 - r) + r;\r\n        }\r\n        //Coordinates of user dot\r\n        ux = cx + s * nx;\r\n        uy = cy + s * ny;\r\n\r\n        /*\r\n        console.log(\"Dist=\" + distKM);\r\n        console.log(\"Normal=\" + [nx, ny]);\r\n        console.log(\"user=\" + [ux, uy]);\r\n        */\r\n\r\n        overlay = <>\r\n        <div className=\"circle\" />\r\n        <OverlayCircle className=\"user-circle\" x={ux} y={uy} active={active} inCell={inCell}/>\r\n        <OverlayCircle className=\"center-circle\" x={cx} y={cy} active={active} inCell={inCell}/>\r\n        </>\r\n    }\r\n\r\n    if (!index) {\r\n        return (\r\n            <td className=\"square empty\" style={{\"width\": props.w, \"height\": props.h}}>\r\n                {overlay}\r\n            </td>\r\n        );\r\n    }\r\n\r\n    const x = index % props.rows;\r\n    const y = Math.floor(index / props.rows);\r\n    const dist = Geo.distanceInKm(props.geoCenter, props.geoUser);\r\n    const debugOverlay = DEBUG(\"CELL_OVERLAY\")\r\n        ? <span style={{position: \"absolute\", color: \"white\", backgroundColor: \"black\"}}> {props.geoCenter.toString() + \" ==> \" + dist + \", in=\" + inCell} </span>\r\n        : null;\r\n    return (\r\n        <td className={classes} onClick={() => props.handleClick()} style={{\"width\": props.w, \"height\": props.h}}>\r\n            {debugOverlay}\r\n            {overlay}        \r\n            <CroppedImage img={props.img} w={props.cols*props.w} h={props.rows*props.h} sx={x*props.w} sy={y*props.h} inCell={inCell}/>\r\n        </td>\r\n    );\r\n}\r\n","import React from 'react';\r\nexport default Solved;\r\n\r\nfunction Solved(props) {\r\n    const imSize = props.serverData.imgsize;\r\n    const aspect = imSize[0] / imSize[1];\r\n    let width = 0.8 * (window.innerWidth);\r\n    let height = 0.8 * (window.innerHeight);\r\n    if (width / height > aspect) {\r\n        width = height * aspect;\r\n    }\r\n    else {\r\n        height = width / aspect;\r\n    }\r\n    //let link = \"corn\";\r\n    let link = props.serverData.solveLink;\r\n    let linkTxt = props.serverData.solveLinkTxt;\r\n    return (\r\n        <center>\r\n            <h1 className=\"party\"> {props.serverData.solveTxt} </h1>\r\n            <p> <a href={link}>{linkTxt}</a> </p>\r\n            <img\r\n                alt=\"SOLVED\"\r\n                src={props.imgSrc}\r\n                width={width}\r\n                height={height}\r\n            />\r\n            <div>\r\n                <button\r\n                    className=\"btn\"\r\n                    onClick={() => props.scrambleFn()}>Scramble</button>\r\n            </div>\r\n        </center>\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as Geo from './geo.js';\r\nimport DEBUG from './debug.js'; \r\nimport Square from './square.js';\r\nimport Solved from './solved.js';\r\n\r\nlet imgHome = \"https://beethacker.github.io/slide/img/\";\r\nlet jsonHome = \"https://beethacker.github.io/slide/json/\";\r\n\r\n//Hack to make json files fetchable locally. Not sure how to set up node/webpack/whatever for this\r\n//so I'll just make them available with a separate python server. \r\nif (DEBUG(\"LOCAL_SERVER\")) {\r\n    //NOTE! In order for fetch to work, we couldn't just say http://localhost:8000/json/\r\n    //here. Instead, we had to set http://localhost as a proxy in package.json.\r\n    //NOPE! Still can't get it to work? :( Just push stuff to github pages then.\r\n    //Oh wait, maybe it WAS working, but I was just parsing json wrong????\r\n    //jsonHome = \"/json/\";\r\n    //imgHome = \"/img/\";\r\n}\r\n\r\nif (DEBUG(\"CLEAR_STATE\")) {\r\n    localStorage.clear();\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //Look for existing local storage...\r\n        let savedState = localStorage[this.props.puzzleName];\r\n        let puzzleState; \r\n        if (savedState) {\r\n            puzzleState = savedState.split(\",\").map(n => Number(n));\r\n        }\r\n        else {\r\n            //TODO support for larger puzzles!\r\n            puzzleState = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n            this.scramble(puzzleState);\r\n        }\r\n        //TODO get this from local storage, or scramble a new one\r\n        this.state = { squares: puzzleState, width: window.innerWidth, height: window.innerHeight };       \r\n\r\n        setInterval(() => {\r\n            this.setState({width: window.innerWidth, height: window.innerHeight});\r\n        }, 2000);\r\n    }\r\n\r\n    minIndex(distanceList) {\r\n        let result = -1;\r\n        let min = 999999;\r\n        for (let i = 0; i < distanceList.length; i++) {\r\n            if (distanceList[i] < min) {\r\n                result = i;\r\n                min = distanceList[i];\r\n            }\r\n        }\r\n        return [result, min];\r\n    }\r\n\r\n    findNearest(geo, cells) {\r\n        let result = -1;\r\n        let min = 9999999999;\r\n        for (var i = 0; i < cells.length; i++) {\r\n            const dist = this.geoDistance(geo, cells[i]);   \r\n            if (dist < min) {\r\n                min = dist;\r\n                result = i;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    neighborsOf(i) {\r\n        var result = [];\r\n        const w = this.props.serverData.gridsize[0];\r\n        const h = this.props.serverData.gridsize[1];\r\n        const row = Math.floor(i / w);\r\n        const size = w * h;\r\n\r\n        //console.log(`i=${i}, w=${w}, row=${row}, size=${size}`);\r\n\r\n        //Down one row\r\n        if (i + w < size) {\r\n            result.push(i + w)\r\n        }\r\n        //Up one \r\n        if (i - w >= 0) {\r\n            result.push(i - w);\r\n        }\r\n        //Right\r\n        if (Math.floor((i + 1) / w) === row) {\r\n            result.push(i + 1);\r\n        }\r\n        //Left\r\n        if (i > 0 && Math.floor((i - 1) / w) === row) {\r\n            result.push(i - 1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    scramble(puzzle) {\r\n        for (let iterations = 0; iterations < 200; iterations++) {\r\n            const zeroIndex = puzzle.indexOf(0);\r\n            const neighborIndices = this.neighborsOf(zeroIndex);\r\n            const randomNeighbor = neighborIndices[Math.floor(Math.random()*neighborIndices.length)];\r\n            puzzle[zeroIndex] = puzzle[randomNeighbor];\r\n            puzzle[randomNeighbor] = 0;\r\n        }\r\n        localStorage[this.props.puzzleName] = puzzle;\r\n    }\r\n    \r\n    handleClick(index) {\r\n        this.updateNearest();\r\n        const squares = this.state.squares.slice();\r\n\r\n        let neighbors = this.neighborsOf(index);\r\n\r\n        //check if move is allowed!! This cell must be the cell that's closest AND we\r\n        //need to to be closer than \r\n        const moveAllowed = ((index === this.nearest[0])  && (this.nearest[1] < this.props.serverData.cells[index][2]))\r\n                            || DEBUG(\"DISABLE_MOVE_CHECK\");\r\n\r\n        if (moveAllowed) {\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                if (squares[neighbors[i]] === 0) {\r\n                    squares[neighbors[i]] = squares[index];\r\n                    squares[index] = 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (neighbors.map(n => squares[n]).includes(0)) {\r\n            if (index === this.nearest[0]) {\r\n                alert(\"You're not close enough to the center of this square!\");\r\n            }\r\n            else {\r\n                alert(\"Can't move this square! You'll have to walk to it first!\");\r\n            }\r\n        }\r\n\r\n        localStorage[this.props.puzzleName] = squares;\r\n        this.setState({squares: squares });\r\n    }\r\n\r\n    renderSquare(i) {\r\n        const imSize = this.props.serverData.imgsize;    \r\n        const gridSize = this.props.serverData.gridsize;    \r\n        const aspect = imSize[0] / imSize[1];\r\n        let width = 0.8*(window.innerWidth) / gridSize[0];\r\n        let height = 0.8*(window.innerHeight) / gridSize[1];\r\n        if (width / height > aspect) {\r\n            width = height * aspect;\r\n        }\r\n        else {\r\n            height = width / aspect;\r\n        }\r\n        return <Square\r\n        img={imgHome + this.props.serverData.img}\r\n        value={this.state.squares[i]} \r\n        isNearest={i === this.nearest[0]}\r\n        geoUser={this.props.geoUser}\r\n        geoCenter={this.props.serverData.cells[i]}\r\n        handleClick={() => this.handleClick(i)} \r\n        w = {width}\r\n        h = {height}\r\n        rows = {this.props.serverData.gridsize[0]}\r\n        cols = {this.props.serverData.gridsize[1]}\r\n        />;\r\n    }\r\n\r\n    updateNearest() {\r\n        this.nearest = [-1, 9993];\r\n        var distanceList = [];\r\n        if (this.props.hasLocation) {\r\n            distanceList = this.props.serverData.cells.map(cell => Geo.distanceInKm(this.props.geoUser, cell));\r\n            this.nearest = this.minIndex(distanceList);\r\n        }\r\n    }\r\n\r\n    isSolved() {\r\n        if (DEBUG(\"SHOW_SOLVED\")) {\r\n            return true;\r\n        }\r\n        let squares = this.state.squares;\r\n        for (let i = 0; i < squares.length - 1; i++) {\r\n            if (squares[i] > squares[i+1]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        this.updateNearest();\r\n        if (this.isSolved()) {\r\n            return (\r\n                 <Solved \r\n                    imgSrc={imgHome + this.props.serverData.img}\r\n                    serverData={this.props.serverData}\r\n                    scrambleFn={() => {\r\n                        let puzzle = this.state.squares.slice();\r\n                        this.scramble(puzzle);\r\n                        this.setState({squares: puzzle});\r\n                        localStorage[this.props.puzzleName] = puzzle;\r\n                    }}/>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <center>\r\n                    <h1> GPS Slide Puzzle! </h1>\r\n                    <table className=\"grid\">\r\n                        <tr className=\"board-row\">\r\n                            {this.renderSquare(0)}\r\n                            {this.renderSquare(1)}\r\n                            {this.renderSquare(2)}\r\n                        </tr>\r\n                        <tr className=\"board-row\">\r\n                            {this.renderSquare(3)}\r\n                            {this.renderSquare(4)}\r\n                            {this.renderSquare(5)}\r\n                        </tr>\r\n                        <tr className=\"board-row\">\r\n                            {this.renderSquare(6)}\r\n                            {this.renderSquare(7)}\r\n                            {this.renderSquare(8)}\r\n                        </tr>\r\n                    </table>\r\n                </center>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction DebugCoords(props) {\r\n    return (\r\n        <fieldset>\r\n            <legend> Debug Coordinates </legend>\r\n            <input value={props.coords[0] + \", \" + props.coords[1]} onChange={props.onChange} style={{width: \"100%\"}}/>            \r\n        </fieldset>\r\n    )\r\n}\r\n\r\nfunction extractPuzzleName(txt) {\r\n    let puzzle = txt;\r\n    if (puzzle.startsWith(\"/\")) {\r\n        puzzle = puzzle.slice(1);\r\n    }\r\n    if (puzzle.startsWith(\"slide\")) {\r\n        puzzle = puzzle.slice(5);\r\n\r\n    }\r\n    if (puzzle.startsWith(\"/\")) {\r\n        puzzle = puzzle.slice(1);\r\n    }\r\n    return puzzle;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {    \r\n        super(props);\r\n\r\n        let puzzle = extractPuzzleName(window.location.pathname);\r\n        if (puzzle.length <= 0 && \"404_hack\" in localStorage) {\r\n            puzzle = extractPuzzleName(localStorage[\"404_hack\"]);\r\n            localStorage.removeItem(\"404_hack\");\r\n        }\r\n        if (puzzle.length <= 0 && \"LAST_PUZZLE\" in localStorage) {\r\n            puzzle = localStorage[\"LAST_PUZZLE\"];\r\n        }\r\n        localStorage[\"LAST_PUZZLE\"] = puzzle;\r\n\r\n        this.state = {hasLocation: false, \r\n            coords: [44, -63],\r\n            serverData: null,\r\n            puzzle: puzzle\r\n        };\r\n\r\n        if (puzzle.length > 0) {\r\n            const json = jsonHome + puzzle + \".json\";\r\n            fetch(json)\r\n            .then( response => response.json())\r\n            .then( data => this.setState({ serverData : data }))        \r\n            .catch( (err) => this.setState({ fetchError: \"Failed to fetch: \" + json }));\r\n        }\r\n        else {\r\n            this.setState({fetchError: \"!Main Page!\"});\r\n        }\r\n\r\n        /*\r\n        this.updateGeoLocation();\r\n        setInterval(() => {\r\n            this.updateGeoLocation();\r\n        }, 15*1000);\r\n        */\r\n        /*let handle = */navigator.geolocation.watchPosition( position => {\r\n            this.setState({ geoError: null, coords: [position.coords.latitude, position.coords.longitude], hasLocation: true});\r\n        },\r\n        err => {\r\n            this.setState({ geoError: \"Can't get GPS location\" });\r\n        });\r\n\r\n        this.debugChangeCoord = this.debugChangeCoord.bind(this);\r\n    }\r\n\r\n    updateGeoLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({ coords: [position.coords.latitude, position.coords.longitude], hasLocation: true });\r\n            });\r\n        } else {\r\n            this.setState({ hasLocation: false });\r\n        }\r\n    }\r\n\r\n    debugChangeCoord(e) {\r\n        const newCoords = e.target.value.split(\",\").map(f => parseFloat(f));\r\n        this.setState({ coords: newCoords });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.fetchError) {\r\n            return <div> {this.state.fetchError} </div>;\r\n        }\r\n        if (this.state.serverData === null) {\r\n            return <div> Loading...</div>;\r\n        }\r\n        return (\r\n            <div> \r\n                { DEBUG(\"SET_GPS\") ? <DebugCoords coords={this.state.coords} onChange={this.debugChangeCoord}/> : null }\r\n                <Board puzzleName={this.state.puzzle} serverData={this.state.serverData} geoUser={this.state.coords} hasLocation={this.state.hasLocation}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}